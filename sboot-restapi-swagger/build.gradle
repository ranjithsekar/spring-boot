plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'java'
	id "jacoco"	
}

apply plugin: 'io.spring.dependency-management'

group = 'jbr.swagger'
version = '0.1'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	//compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-core:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	runtime('com.h2database:h2')
	runtime('org.springframework.boot:spring-boot-devtools')
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	testAnnotationProcessor 'org.projectlombok:lombok'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompileOnly 'org.projectlombok:lombok'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport 
}

jacocoTestReport {
    dependsOn test 
    afterEvaluate {
    	classDirectories.from = files(classDirectories.files.collect {
        	fileTree(dir: it, exclude: [
            	'**/model/**.class','**/dto/**.class'
            ])
        })
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1
            }
        }
    }
}
