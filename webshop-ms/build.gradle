plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "jacoco"	
}

group = 'jbr.webshop'
version = '0.1'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:11.1.0'
	implementation 'com.graphql-java-kickstart:graphiql-spring-boot-starter:11.1.0'
	implementation 'joda-time:joda-time:2.10.10'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testAnnotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'	
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
	useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        html.destination layout.buildDirectory.dir('jacoco-reports').get().asFile
    }
    afterEvaluate {
    	classDirectories.from = files(classDirectories.files.collect {
        	fileTree(dir: it, exclude: [
            	'**/model/**.class','**/common/model/**.class','**/dto/**.class','**/common/**/**.class'
            ])
        })
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1
            }
        }
    }
}
